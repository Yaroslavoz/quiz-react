{"version":3,"sources":["logo.svg","images/q1.png","data/quiz-data.js","Components/QuizContainer.js","Components/QuizQuestion.js","App.js","reportWebVitals.js","index.js"],"names":["QUIZ_DATA","type","question","answers","correct","url","useStyles","makeStyles","theme","root","marginTop","spacing","display","flexDirection","alignItems","QuizContainer","children","styles","Container","container","maxWidth","className","fontSize","fontFamily","formControl","margin","button","textField","width","card","backgroundColor","color","cardText","media","height","objectFit","title","wrongAnswer","correctAnswer","QuizQuestion","dataToRender","useState","quizCount","setQuizCount","data","setData","total","length","success","setSuccess","useEffect","updatedData","handleChange","e","index","target","classList","add","Typography","component","variant","Card","raised","CardActionArea","CardMedia","image","CardContent","gutterBottom","CardActions","List","map","answer","ListItem","ListItemIcon","ListItemText","primary","onClick","uuidv4","noValidate","autoComplete","TextField","id","label","multiline","fullWidth","rows","defaultValue","Button","Swal","fire","textAlign","textShadow","App","isStartPage","setStartPage","setDataToRender","handleQuizChoice","currentTarget","simple","filter","questiontask","picturestask","src","logo","alt","Grid","item","xs","sm","md","pic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78d4353d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/q1.d59787c4.png\";","export const QUIZ_DATA = [\r\n  {\r\n      type: 'Test',\r\n      question: 'What does CSS stand for?',\r\n      answers: ['Computer Style Sheets', 'Creative Style Sheets', 'Cascading Style Sheets', 'Colorful Style Sheets'],\r\n      correct: 3\r\n  },\r\n\r\n  {\r\n      type: 'Test',\r\n      question: 'Where in an HTML document is the correct place to refer to an external style sheet?',\r\n      answers: ['In the <head> section', 'In the <body> section', 'At the end of the document', 'You can\\'t refer to an external style sheet'],\r\n      correct: 1\r\n  },    \r\n  {\r\n      type: 'Test',\r\n      question: 'Which HTML tag is used to define an internal style sheet?',\r\n      answers: ['<style>', '<script>', '<headStyle>', '<css>'],\r\n      correct: 1\r\n  },    \r\n  {\r\n      type: 'Test',\r\n      question: 'Which HTML attribute is used to define inline styles?',\r\n      answers: ['class', 'style', 'font', 'styles'],\r\n      correct: 2\r\n  },\r\n  {\r\n      type: 'Test',\r\n      question: 'Which is the correct CSS syntax?',\r\n      answers: ['{body:color=black;}', '{body;color:black;}', 'body:color=black;', 'body {color: black;}'],\r\n      correct: 4\r\n  },\r\n  {\r\n      type: 'Test',\r\n      question: 'How do you insert a comment in a CSS file?',\r\n      answers: ['\\' this is a comment', '/* this is a comment */', '// this is a comment', '// this is a comment //'],\r\n      correct: 2\r\n  },\r\n  {\r\n      type: 'Test',\r\n      question: 'Which property is used to change the background color?',\r\n      answers: ['color', 'bgcolor', 'background-color', 'bgColor'],\r\n      correct: 3\r\n  },\r\n  {\r\n      type: 'Test',\r\n      question: 'How do you add a background color for all <h1> elements?',\r\n      answers: ['all.h1 {background-color:#FFFFFF;}', 'h1.setAll {background-color:#FFFFFF;}', 'h1.all {background-color:#FFFFFF;}', 'h1 {background-color:#FFFFFF;}'],\r\n      correct: 4\r\n  },\r\n  {\r\n    type: 'Text',\r\n    question: 'How do you feel about autumn?'\r\n  },\r\n  {\r\n    type: 'Text',\r\n    question: 'Do You Text Too Much??'\r\n  },\r\n  {\r\n    type: 'Text',\r\n    question: 'Peter : Merry and I have our wedding anniversary next week. \\n Aunt Merci : Oh yes! I almost forgot about that.\\n  Peter : So, would you please come to our place next Tuesday? \\n Aunt Merci : Yes. I’ll be there Peter. Did you call up your uncle about it? He is at the office now. \\n based on the dialog above, what kind occasion will be held?'\r\n  },\r\n  {\r\n      type: 'Picture',\r\n      url: 'https://bit.ly/2XdNOmO',\r\n      question: 'what a place it is?',\r\n      answers: ['Taj Mahal', 'Hetman Skoropadsky Palace', 'Stonehenge', 'Coliseum'],\r\n      correct: 4\r\n  },\r\n  {\r\n      type: 'Picture',\r\n      url: 'https://bit.ly/2XalXUH',\r\n      question: 'Name the dish and the country it\\'s from',\r\n      answers: ['Pizza, Italy', 'Sushi, Japan', 'Maiz, Mexico', 'Varenyky, Ukraine'],\r\n      correct: 4\r\n  },\r\n]\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  }\r\n}))\r\n\r\nexport const QuizContainer = ({ children }) => {\r\n  const styles = useStyles()\r\n  return (\r\n    <Container container=\"main\" maxWidth=\"xs\" className={styles.root} >\r\n      {children}\r\n    </Container>\r\n  )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport { Container } from \"@material-ui/core\";\r\nimport Confetti from \"react-confetti\";\r\nimport Swal from \"sweetalert2\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontSize: \"30px\",\r\n    fontFamily: \"Permanent Marker\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1, 1, 0, 0),\r\n  },\r\n  textField: {\r\n    margin: theme.spacing(1),\r\n    width: '50ch',\r\n  },\r\n  card: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: '#697A21',\r\n    color: '#DDF0FF'\r\n  },\r\n  cardText: {\r\n    color: '#DDF0FF'\r\n  },\r\n  media: {\r\n    height: 280,\r\n    objectFit: \"contain\"\r\n  },\r\n  title: {\r\n    fontSize: \"20px\",\r\n    fontFamily: \"Permanent Marker\",\r\n  },\r\n  wrongAnswer: {\r\n    backgroundColor: 'red'\r\n  },\r\n  correctAnswer: {\r\n    backgroundColor: 'green'\r\n  }\r\n}))\r\n\r\nexport const QuizQuestion = ({ dataToRender }) => {\r\n  const styles = useStyles()\r\n  const [quizCount, setQuizCount] = useState(0)\r\n  const [data, setData] = useState(dataToRender[quizCount])\r\n  const total = dataToRender.length\r\n  const [success, setSuccess] = useState(false);\r\n  \r\n\r\n  useEffect(() => {\r\n    const updatedData = dataToRender[quizCount]\r\n    setData(updatedData)\r\n  }, [quizCount, dataToRender])\r\n\r\n  const handleChange = (e, index) => {\r\n   \r\n     if(index+1===data.correct){\r\n      e.target.classList.add('green-item')\r\n     } else {e.target.classList.add('red-item')}\r\n     \r\n  };\r\n\r\n  const handleCount = () => {\r\n    if((quizCount+1)===total){\r\n      Swal.fire(\"Great job!\", \"You've passed the challenge! \\n To try one more time - please, refresh the page\", \"success\");\r\n      setSuccess(true);}\r\n      \r\n    setQuizCount(quizCount+1)\r\n  }\r\n\r\n   if (success) {\r\n    return <Confetti />;\r\n  }\r\n return (data &&  <>\r\n    <Typography className={styles.root} component=\"h2\" variant=\"h5\">\r\n      ✨ {data.type} quiz\r\n    </Typography>\r\n    {data.url ? \r\n    (<>\r\n    <Container maxWidth='xl'>\r\n    <Card className={styles.card} raised>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={styles.media}\r\n          image={data.url}\r\n          title=\"Picture Quiz\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Picture\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={styles.cardText}>\r\n            {data.question}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        {data.answers.map((answer, index) =>( \r\n          <ListItem key={uuidv4()} button >\r\n            <ListItemIcon>\r\n              <RadioButtonUncheckedIcon  />\r\n            </ListItemIcon >\r\n            <ListItemText primary={answer} onClick={(e)=>handleChange(e, index)}/>\r\n          </ListItem>)\r\n        )}\r\n      </List>\r\n      \r\n      </CardActions>\r\n    </Card>\r\n    </Container>\r\n  \r\n    </>)\r\n    : data.type === 'Text'\r\n    ? (<>\r\n      <Typography variant=\"h6\"  component=\"h5\" className={styles.title}>\r\n            {data.question}\r\n      </Typography>\r\n      <form className={styles.textField} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-multiline-static\"\r\n          label=\"Write your answer..\"\r\n          multiline\r\n          fullWidth\r\n          rows={10}\r\n          defaultValue=\"..here\"\r\n          variant=\"outlined\"\r\n        />\r\n        \r\n      </form>\r\n      </>\r\n    )\r\n    :(<>\r\n    <Typography variant=\"h6\"  component=\"h5\" className={styles.title}>\r\n     {data.question}\r\n     </Typography>\r\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        {data.answers.map((answer, index) =>( \r\n          <ListItem key={uuidv4()} button >\r\n            <ListItemIcon>\r\n              <RadioButtonUncheckedIcon  />\r\n            </ListItemIcon >\r\n            <ListItemText primary={answer} onClick={(e)=>handleChange(e, index)}/>\r\n          </ListItem>)\r\n        )}\r\n      </List>\r\n    \r\n    </>\r\n\r\n\r\n\r\n\r\n\r\n      // <form onSubmit={handleSubmit}>\r\n      //   <FormControl component=\"fieldset\" className={styles.formControl}>\r\n      //     <Typography variant=\"h6\"  component=\"h5\" className={styles.title}>\r\n      //       {data.question}\r\n      //     </Typography>\r\n      //     <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={radioValue} onChange={handleRadioChange}>\r\n      //       {data.answers.map((answer, index) => \r\n      //           <FormControlLabel value={answer} control={<Radio />} label={answer} onClick={(e)=>handleChange(e, index)}/>\r\n      //         )}\r\n      //     </RadioGroup>\r\n      //   </FormControl>\r\n      // </form>\r\n    )\r\n    \r\n    }\r\n    <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleCount}\r\n      >\r\n       {quizCount+1 === total? 'Finish': 'Next'}\r\n      </Button>\r\n    </>)\r\n}","import { useState, useEffect } from 'react'\nimport logo from './logo.svg';\nimport pic from './images/q1.png';\nimport { QUIZ_DATA } from './data/quiz-data'\nimport './App.css';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from \"@material-ui/core\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { QuizContainer } from './Components/QuizContainer'\nimport { QuizQuestion } from './Components/QuizQuestion';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: { \n    margin: theme.spacing(3, 0, 2),\n    textAlign: \"center\",\n    fontSize: \"40px\",\n    fontFamily: \"Permanent Marker\",\n    color: \"#61dafb\",\n    textShadow: \"1px 1px #2a606e\"\n  },\n  card: {\n    margin: theme.spacing(1),\n    backgroundColor: '#697A21',\n    color: '#DDF0FF'\n  },\n  cardText: {\n    color: '#DDF0FF'\n  },\n  media: {\n    height: 280,\n    objectFit: \"contain\"\n  }\n}))\n\nfunction App() {\n  const [isStartPage, setStartPage] = useState(true)\n  const [dataToRender, setDataToRender] = useState(QUIZ_DATA)\n  const styles = useStyles()\n  useEffect(() => {\n    setDataToRender(QUIZ_DATA)\n    \n  }, [])\n\n\n\n  const handleQuizChoice = (e) =>{\n    const choice = e.currentTarget.id\n    switch(choice){\n      case 'Test':\n        const simple = dataToRender.filter(question => question.type === \"Test\")\n        setDataToRender(simple)\n        break\n      case 'Text':\n        const questiontask = dataToRender.filter(question => question.type === \"Text\")\n        setDataToRender(questiontask)\n        break\n      case 'Picture':\n        const picturestask = dataToRender.filter(question => question.type === \"Picture\")\n        setDataToRender(picturestask)\n        break\n      default: setDataToRender(['empty'])\n    }\n    setStartPage(false)\n    \n  }\n\n  return (\n    <Container maxWidth=\"md\">\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Typography className={styles.root} component=\"h1\" variant=\"h5\">\n            Quiz Reactor Component\n        </Typography>\n      </header>\n      {isStartPage ? \n      (<Grid container spacing={3}>\n      <Grid item xs={12} sm={6} md={4}>\n\n        <Card className={styles.card}>\n          <CardActionArea>\n            <CardMedia\n              className={styles.media}\n              component=\"img\"\n              alt=\"simple dimple quiz\"\n              image={pic}\n              title=\"quiz\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Simple quiz\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={styles.cardText}>\n                Here you can try your skills..or knowledges in js area\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button id='Test' variant=\"contained\" onClick={handleQuizChoice}>Simple quiz</Button>\n          </CardActions>\n        </Card>\n\n\n        \n      </Grid>\n      <Grid item xs={12} sm={6} md={4}>\n\n      <Card className={styles.card}>\n          <CardActionArea>\n            <CardMedia\n              className={styles.media}\n              component=\"img\"\n              alt=\"text quiz\"\n              image=\"https://bit.ly/3jRpobt\"\n              title=\"text quiz\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Text quiz\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={styles.cardText}>\n                Type the multiple questions in text area. Write about\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button id=\"Text\" variant=\"contained\" color=\"primary\" onClick={handleQuizChoice}>\n              Bla-bla QA\n            </Button>\n          </CardActions>\n        </Card>\n\n\n        \n      </Grid>\n      <Grid item xs={12} sm={12} md={4}>\n        \n        <Card className={styles.card}>\n          <CardActionArea>\n            <CardMedia\n              className={styles.media}\n              component=\"img\"\n              alt=\"picture quiz\"\n              image=\"https://bit.ly/3nf6T2Q\"\n              title=\"picture quiz\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Guess the picture\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={styles.cardText}>\n                Try to find the image described in question\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button id=\"Picture\" variant=\"contained\" color=\"secondary\" onClick={handleQuizChoice}>\n              Picture quiz\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>) :\n\n    (<QuizContainer>\n      {dataToRender && dataToRender[0] !== 'empty' && \n        <QuizQuestion dataToRender={dataToRender} />}\n    </QuizContainer>)\n    }\n    </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}